var PI_2 = Math.PI / 2;

class Vector2 {
	constructor(x, y){
		this.x = x || 0;
		this.y = y || 0;
	}
	
	static get zero(){
		return new Vector2();
	}
	static get up(){
		return new Vector2(0,1);
	}
	static get down(){
		return new Vector2(0,-1);
	}
	static get left(){
		return new Vector2(-1,0);
	}
	static get right(){
		return new Vector2(1,0);
	}
	
	static check(v){
		if (!v) return Vector2.zero;
		if (v instanceof Array) return new Vector2(v[0], v[1]);
		if (typeof v != 'object') return new Vector2(v, v);
		return v;
	}
	
	static round(n, depth = 1000){
		return Math.round(depth * n) / depth;
	}
	static roundVector(v, depth = 1000){
		return v.clone().roundSelf(depth);
	}
	
	roundSelf(depth){
		return this.withSelf( (coo) => Vector2.round(coo, depth) );
	}
	
	withSelf(forCoo = ()=>{}){
		this.x = forCoo(this.x);
		this.y = forCoo(this.y);
		return this;
	}
	
	clone(){
		return new Vector2(this.x, this.y);
	}
	
	add(v){
		v = Vector2.check(v);
		this.x += v.x;
		this.y += v.y;
		return this;
	}
	sub(v){
		v = Vector2.check(v);
		this.x -= v.x;
		this.y -= v.y;
		return this;
	}
	mult(v){
		v = Vector2.check(v);
		this.x *= v.x;
		this.y *= v.y;
		return this;
	}
	normalize(){
		this.mult(1.0 / this.length);
		return this;
	}
	
	equals(v){
		return this.x == v.x && this.y == v.y;
	}
	
	get sqrLength(){
		return this.x * this.x + this.y * this.y;
	}
	get length(){
		return Math.sqrt(this.sqrLength);
	}
	
	toString(){
		return '(' + this.x + ', ' + this.y + ')';
	}
	
	getAngle(){
		let angle = Math.acos(this.x / this.length);
		if (this.y < 0) angle = -angle;
		return angle;
	}
	
	setAngle(newAngle, center){
		if (!center) center = Vector2.zero;
		
		this.sub(center);
		let len = this.length;
		
		this.x = len * Math.cos(newAngle);
		this.y = len * Math.sin(newAngle);
		
		this.add(center);
		return this;
	}
}

export default Vector2;