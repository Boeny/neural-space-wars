import Canvas from './canvas';
import Controls from './controls';

/**
 * @prop {Array} models [ {className: class}, ... ]
 * @prop {Number} width of the canvas
 * @prop {Number} height of the canvas
 */
Canvas.ready = function(models, multiplier){
	if (!models) return;
	
	var objects = {};
	
	for (var i = 0; i < models.length; i++){
		let obj = models[i];// {className: class}
		let className = Object.keys(obj)[0];
		objects[className.toLowerCase()] = new obj[className]();
	}
	
	global.onload = function(){
		var renderer = new Canvas(multiplier);
		var updates = [];
		var controls = new Controls(renderer);
		
		for (var name in objects){
			let obj = objects[name];
			obj.renderer = renderer;
			obj.controls = controls;
			
			if (obj.Start) obj.Start(objects);
			
			if (obj.render || obj.Update){
				let upd;
				
				if (obj.render && !obj.Update) upd = obj.render.bind(obj);
				
				if (!obj.render && obj.Update) upd = obj.Update.bind(obj);
				
				if (obj.render && obj.Update) upd = () => {
					obj.Update();
					obj.render();
				};
				
				updates.push(upd);
				if (obj.render) obj.render();
			}
		}
		
		controls.Bind(objects);
		
		(function render(){
			requestAnimationFrame(render);
			renderer.clear();
			
			for (var i = 0; i < updates.length; i++){
				updates[i]();
			}
		})();
	};
}

export default Canvas;
